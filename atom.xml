<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DQQ-Blog</title>
  
  <subtitle>前端 弱鸡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-16T12:39:55.454Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>邓乐乐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二章   ECMAScript 和 TypeScript</title>
    <link href="http://yoursite.com/2020/09/16/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%20%20ECMAScript%20%E5%92%8C%20TypeScript/"/>
    <id>http://yoursite.com/2020/09/16/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%20%20ECMAScript%20%E5%92%8C%20TypeScript/</id>
    <published>2020-09-16T12:39:13.136Z</published>
    <updated>2020-09-16T12:39:55.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Tip1"><a href="#Tip1" class="headerlink" title="Tip1"></a>Tip1</h4><h5 id="函数的参数可以定义默认值啦"><a href="#函数的参数可以定义默认值啦" class="headerlink" title="函数的参数可以定义默认值啦"></a>函数的参数可以定义默认值啦</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(a&#x3D;1, b&#x3D;2, c&#x3D;3)&#123;</span><br><span class="line">    return a+b+c;</span><br><span class="line">&#125;</span><br><span class="line">console.log(4,9) &#x2F;&#x2F;输出 16 (4 +9 +3)</span><br></pre></td></tr></table></figure><blockquote><p>函数内部有一个内置的arguments对象。这是个数组，包含函数被调用时传入的参数</p></blockquote><h4 id="Tip2"><a href="#Tip2" class="headerlink" title="Tip2"></a>Tip2</h4><h5 id="声明展开和剩余参数-…的应用"><a href="#声明展开和剩余参数-…的应用" class="headerlink" title="声明展开和剩余参数(…的应用)"></a>声明展开和剩余参数(…的应用)</h5><ul><li>展开运算符 …</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ...可以把数组转换为一个个参数</span><br><span class="line">let num &#x3D; [1,2,3];</span><br><span class="line">function sum(a,b,c)&#123;</span><br><span class="line">    return a+b+c;</span><br><span class="line">&#125;</span><br><span class="line">sum(...num)</span><br><span class="line">&#x2F;&#x2F;之前的方法是 A.apply(B,arguments)</span><br></pre></td></tr></table></figure><ul><li>剩余参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(a,b,c,...d)&#123;</span><br><span class="line">    return a*b*c*d.length</span><br><span class="line">&#125;</span><br><span class="line">sum(1,2,3,4,5,6,&#39;hello&#39;,&#39;3&#39;)  &#x2F;&#x2F;30</span><br></pre></td></tr></table></figure></li></ul><h4 id="Tip3"><a href="#Tip3" class="headerlink" title="Tip3"></a>Tip3</h4><h5 id="对象属性增强啦"><a href="#对象属性增强啦" class="headerlink" title="对象属性增强啦"></a>对象属性增强啦</h5><ol><li>数组结构：一次初始化多个变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [x,y,z] &#x3D; [1,&#39;2&#39;,3] &#x2F;&#x2F; x&#x3D;1 y&#x3D;&#39;2&#39; z&#x3D;3</span><br></pre></td></tr></table></figure></li><li>值互换：不需要创建临时变量就能把值互换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x, y] &#x3D; [y, x]</span><br></pre></td></tr></table></figure></li><li>属性简写：是对象解构的另一种方式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [x, y] &#x3D;[&#39;a&#39;, &#39;b&#39;]</span><br><span class="line">let obj &#x3D;&#123;x, y&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>简写方法名： 支持像声明属性一样声明函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">    name: &#39;dll&#39;,</span><br><span class="line">    age: 22,</span><br><span class="line">    show() &#123;</span><br><span class="line">        console.log(this.name + this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tip4"><a href="#Tip4" class="headerlink" title="Tip4"></a>Tip4</h4><h5 id="从对象过渡到类的面向对象编程"><a href="#从对象过渡到类的面向对象编程" class="headerlink" title="从对象过渡到类的面向对象编程"></a>从对象过渡到类的面向对象编程</h5></li><li>声明类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const Book &#123;</span><br><span class="line">    constructor(title, page, isbn) &#123;</span><br><span class="line">        this.title &#x3D; title;</span><br><span class="line">        this.page &#x3D; page;</span><br><span class="line">        this.isbn &#x3D; isb;</span><br><span class="line">    &#125;</span><br><span class="line">    printfTitle() &#123;</span><br><span class="line">        console.log(this.title)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let book1 &#x3D; new Book(&#39;红楼&#39;,&#39;123&#39;, &#39;yes&#39;)</span><br><span class="line">alert(book1.title)</span><br></pre></td></tr></table></figure></li><li>类的继承</li></ol><blockquote><p>extends关键字扩展一个类并继承它的行为，构造函数里通过super关键字引用父类的构造函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class ITBook extends Book &#123;</span><br><span class="line">    constructor (title, page, isbn, technology)&#123;</span><br><span class="line">        super(title, page, isbn);</span><br><span class="line">        this.technology &#x3D; technology;</span><br><span class="line">    &#125;</span><br><span class="line">    printfTechnology() &#123;</span><br><span class="line">        console.log(this.technology)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tip5"><a href="#Tip5" class="headerlink" title="Tip5"></a>Tip5</h4><h5 id="乘方运算符"><a href="#乘方运算符" class="headerlink" title="乘方运算符 **"></a>乘方运算符 **</h5><p>指数运算 <code>a**b =&gt; a*a*a*a....*a</code>  b个a相乘 即 a的b次方  </p><h4 id="Tip6"><a href="#Tip6" class="headerlink" title="Tip6"></a>Tip6</h4><h5 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h5><p><code>import</code>  /     <code>export</code> /  <code>export default</code> 的使用</p><ol><li><p>import ：导入关键字</p><blockquote><p>可以导入组件、方法、类…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; &#125; from &#39;xxx&#39; (1)</span><br><span class="line">import xxx from &#39;xxx&#39; (2)</span><br></pre></td></tr></table></figure></li><li><p>export：导出关键字</p><blockquote><p>使用这个关键字导入时要加{} </p></blockquote></li><li><p>export default： 导出关键字</p><blockquote><p>使用这个关键字导入时不用加{}</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Tip1&quot;&gt;&lt;a href=&quot;#Tip1&quot; class=&quot;headerlink&quot; title=&quot;Tip1&quot;&gt;&lt;/a&gt;Tip1&lt;/h4&gt;&lt;h5 id=&quot;函数的参数可以定义默认值啦&quot;&gt;&lt;a href=&quot;#函数的参数可以定义默认值啦&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第一章   JavaScript 基础补充</title>
    <link href="http://yoursite.com/2020/07/18/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%20%20JavaScript%20%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%85%85/"/>
    <id>http://yoursite.com/2020/07/18/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%20%20JavaScript%20%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%85%85/</id>
    <published>2020-07-18T03:16:55.920Z</published>
    <updated>2020-09-16T12:31:15.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Tip1"><a href="#Tip1" class="headerlink" title="Tip1"></a>Tip1</h4><h5 id="在body标签之间引入-JS脚本会有更好的页面性能哦"><a href="#在body标签之间引入-JS脚本会有更好的页面性能哦" class="headerlink" title="在body标签之间引入 JS脚本会有更好的页面性能哦"></a>在body标签之间引入 JS脚本会有更好的页面性能哦</h5><h4 id="Tip2"><a href="#Tip2" class="headerlink" title="Tip2"></a>Tip2</h4><h5 id="typeof运算符和delete运算符"><a href="#typeof运算符和delete运算符" class="headerlink" title="typeof运算符和delete运算符"></a>typeof运算符和delete运算符</h5><blockquote><p>typeof ‘123’ // string 返回变量或表达式类型</p></blockquote><blockquote><p>delete myObj.age  // 删除对象的属性</p></blockquote><h4 id="Att1"><a href="#Att1" class="headerlink" title="Att1"></a>Att1</h4><h5 id="num-和-num的区别"><a href="#num-和-num的区别" class="headerlink" title="num++ 和++num的区别"></a>num++ 和++num的区别</h5><blockquote><p>num++ 先输出再运算  </p></blockquote><blockquote><p>++num 先运算在输出</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200804104937475.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTM0MDU5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Att2"><a href="#Att2" class="headerlink" title="Att2"></a>Att2</h4><h5 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h5><ol><li>原始数据类型： null、undefined、String、Number、Boolean、Symbol</li><li>派生数据类型： Object、Function、Array、RegExp</li></ol><h4 id="Att3"><a href="#Att3" class="headerlink" title="Att3"></a>Att3</h4><h5 id="JavaScript的真和假"><a href="#JavaScript的真和假" class="headerlink" title="JavaScript的真和假"></a>JavaScript的真和假</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对应转换</span><br><span class="line">undefined  &#x3D;&gt; false</span><br><span class="line">null &#x3D;&gt; false</span><br><span class="line">+-0  &#x3D;&gt; false</span><br><span class="line">aN &#x3D;&gt; false</span><br><span class="line">&#39;&#39; &#x3D;&gt; false</span><br><span class="line">&#x2F;&#x2F;其余都是true</span><br></pre></td></tr></table></figure><h4 id="Att4"><a href="#Att4" class="headerlink" title="Att4"></a>Att4</h4><h5 id="相等运算符-和"><a href="#相等运算符-和" class="headerlink" title="相等运算符 == 和 ==="></a>相等运算符 == 和 ===</h5><ol><li>== 不同类型的值也可以被看做相等  <code>&#39;123&#39; == 123</code></li></ol><p><img src="https://img-blog.csdnimg.cn/20200804112927557.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTM0MDU5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>=== 比较的两个值类型不同就为<code>false</code> 若类型相同在比较值<blockquote><p>注意两点</p></blockquote></li></ol><blockquote><p>1.x和y值相同但不是NaN   true</p></blockquote><blockquote><p>2.x和y引用同一个对象    true</p></blockquote><h4 id="Att5"><a href="#Att5" class="headerlink" title="Att5"></a>Att5</h4><h5 id="面对对象编程"><a href="#面对对象编程" class="headerlink" title="面对对象编程"></a>面对对象编程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Book(title, pages, isbn) &#123;  &#x2F;&#x2F;构造类</span><br><span class="line">    this.title &#x3D; title;</span><br><span class="line">    this.pages &#x3D; pages;</span><br><span class="line">    this.isbn &#x3D; isbn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var book1 &#x3D; new Book(&#39;红楼&#39;,&#39;128&#39;,&#39;yes&#39;)  &#x2F;&#x2F;new 实例化这个类 &#x3D; book1对象</span><br></pre></td></tr></table></figure><blockquote><p>使用new操作符调用函数，就可作为构造函数。（this就被绑定在这个构造函数里）</p></blockquote><blockquote><p>不通过new调用函数，属性和方法都会被定义在全局对象上 （this指向window） </p></blockquote><ul><li>prototype定义</li></ul><p>属性或方法在函数原型上定义，所有实例共享该属性或方法(引用同一个原型的两个实例的属性和方法相同==）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype.sayTitle &#x3D; function() &#123;</span><br><span class="line">    console.log(this.title)</span><br><span class="line">&#125;</span><br><span class="line">book1.sayTitle();</span><br></pre></td></tr></table></figure><ul><li>直接定义在类里</li></ul><p>属性或方法在类中定义，所有实例通过new创建自己的函数（通过new构造的两个实例属性和方法不同）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Book(title, pages, isbn) &#123;</span><br><span class="line">    this.title &#x3D; title;</span><br><span class="line">    this.pages &#x3D; pages;</span><br><span class="line">    this.isbn &#x3D; isbn;</span><br><span class="line">    this.sayTitle &#x3D; function() &#123;</span><br><span class="line">        console.log(this.title);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">book1.sayTitle();</span><br></pre></td></tr></table></figure><ul><li>约定</li></ul><p>公共的函数和属性通过prototype创建，私有函数和属性直接在类中定义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Tip1&quot;&gt;&lt;a href=&quot;#Tip1&quot; class=&quot;headerlink&quot; title=&quot;Tip1&quot;&gt;&lt;/a&gt;Tip1&lt;/h4&gt;&lt;h5 id=&quot;在body标签之间引入-JS脚本会有更好的页面性能哦&quot;&gt;&lt;a href=&quot;#在body标签之间引入-JS脚本会有更
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
